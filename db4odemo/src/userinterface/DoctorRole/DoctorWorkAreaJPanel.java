/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.PatientsAllocatedWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.PatientRole.AddVitalSign;
import Business.VitalSign.VitalSign;
import javax.swing.JOptionPane;

/**
 *
 * @author yash
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business=business;
        valueLabel.setText(enterprise.getName());
        populateRequestTable();
        populatePatientTable();
       // checkNotification();
    }
    public void checkNotification(int count){
        for(int i=0 ; i<=count;i++ ){
            UserAccount ac = (UserAccount)patientsListJTable.getValueAt(i, 0);
            
               for(VitalSign v: ac.getPatientAccount().getVitalSignHistory().getVitalSigns())
               {
                   String s = "no";
                   if(v.getStatus().equals(s)){
                       
                   }
               }
            
        }
        
    }
    public void populatePatientTable(){
        DefaultTableModel model = (DefaultTableModel) patientsListJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request.getSender().getRole().toString().equals("Business.Role.NGOAdministrativeRole")){
            Object[] row = new Object[4];
            UserAccount u = ((PatientsAllocatedWorkRequest) request).getPatientAccount();
            row[0] = u;
            row[1] = request.getSender();
            row[3] = u.getPatientAccount().getCondition();
            for(VitalSign v: u.getPatientAccount().getVitalSignHistory().getVitalSigns())
               {
                   String s = "no";
                   if(v.getStatus().equals(s)){
                       row[2] = "Waiting for Doctor to Check";
                   }else{
                       row[2] = "Checked";
                   }
        }
            
            model.addRow(row);
            }
        }
        System.out.println(model.getRowCount());
        
    }

    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable1.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
         //   System.out.println(request.getSender().getRole());
            if(request.getSender().getRole().toString().equals("Business.Role.DoctorRole")){
            Object[] row = new Object[4];
            row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            String result = ((LabTestWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
            
            model.addRow(row);
            }
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientsListJTable = new javax.swing.JTable();
        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable1 = new javax.swing.JTable();
        checkPatientBtn = new javax.swing.JButton();
        checkAvailablePatientsjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patientsListJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient name", "NGO Name", "Status", "Patient Health Condition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientsListJTable);
        if (patientsListJTable.getColumnModel().getColumnCount() > 0) {
            patientsListJTable.getColumnModel().getColumn(0).setResizable(false);
            patientsListJTable.getColumnModel().getColumn(1).setResizable(false);
            patientsListJTable.getColumnModel().getColumn(2).setResizable(false);
            patientsListJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 799, 97));

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(854, 11, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 27, 127, 30));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 27, 158, 26));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Image/insideHospital_GIF.gif"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 630, 376));

        workRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable1);
        if (workRequestJTable1.getColumnModel().getColumnCount() > 0) {
            workRequestJTable1.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable1.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable1.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 799, 97));

        checkPatientBtn.setText("Check Patients");
        checkPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPatientBtnActionPerformed(evt);
            }
        });
        add(checkPatientBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 240, -1, -1));

        checkAvailablePatientsjButton.setText("check patients");
        checkAvailablePatientsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAvailablePatientsjButtonActionPerformed(evt);
            }
        });
        add(checkAvailablePatientsjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 140, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();
        populatePatientTable();
        
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void checkPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPatientBtnActionPerformed
        
         int selectedRow = patientsListJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to Check the Patient ?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                
        UserAccount ac = (UserAccount)patientsListJTable.getValueAt(selectedRow, 0);
        CheckPatientsWorkArea checkPatientsWorkArea = new CheckPatientsWorkArea(userProcessContainer, ac ,userAccount, business,enterprise);
        userProcessContainer.add("CheckPatientsWorkArea", checkPatientsWorkArea);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
        }else {
            JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_checkPatientBtnActionPerformed

    private void checkAvailablePatientsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAvailablePatientsjButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("MoniteredPatientsJPanel", new MoniteredPatientsJPanel(userProcessContainer, userAccount, enterprise));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_checkAvailablePatientsjButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkAvailablePatientsjButton;
    private javax.swing.JButton checkPatientBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientsListJTable;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable1;
    // End of variables declaration//GEN-END:variables
}
